import * as ec from '../basic-types';
import { ApplicationDescription } from './ApplicationDescription';
import { ServiceCounterDataType } from './ServiceCounterDataType';
import { DataStream } from '../basic-types/DataStream';
export interface ISessionDiagnosticsDataType {
    sessionId?: ec.NodeId;
    sessionName?: string;
    clientDescription?: ApplicationDescription;
    serverUri?: string;
    endpointUrl?: string;
    localeIds?: string[];
    actualSessionTimeout?: ec.Double;
    maxResponseMessageSize?: ec.UInt32;
    clientConnectionTime?: Date;
    clientLastContactTime?: Date;
    currentSubscriptionsCount?: ec.UInt32;
    currentMonitoredItemsCount?: ec.UInt32;
    currentPublishRequestsInQueue?: ec.UInt32;
    totalRequestCount?: ServiceCounterDataType;
    unauthorizedRequestCount?: ec.UInt32;
    readCount?: ServiceCounterDataType;
    historyReadCount?: ServiceCounterDataType;
    writeCount?: ServiceCounterDataType;
    historyUpdateCount?: ServiceCounterDataType;
    callCount?: ServiceCounterDataType;
    createMonitoredItemsCount?: ServiceCounterDataType;
    modifyMonitoredItemsCount?: ServiceCounterDataType;
    setMonitoringModeCount?: ServiceCounterDataType;
    setTriggeringCount?: ServiceCounterDataType;
    deleteMonitoredItemsCount?: ServiceCounterDataType;
    createSubscriptionCount?: ServiceCounterDataType;
    modifySubscriptionCount?: ServiceCounterDataType;
    setPublishingModeCount?: ServiceCounterDataType;
    publishCount?: ServiceCounterDataType;
    republishCount?: ServiceCounterDataType;
    transferSubscriptionsCount?: ServiceCounterDataType;
    deleteSubscriptionsCount?: ServiceCounterDataType;
    addNodesCount?: ServiceCounterDataType;
    addReferencesCount?: ServiceCounterDataType;
    deleteNodesCount?: ServiceCounterDataType;
    deleteReferencesCount?: ServiceCounterDataType;
    browseCount?: ServiceCounterDataType;
    browseNextCount?: ServiceCounterDataType;
    translateBrowsePathsToNodeIdsCount?: ServiceCounterDataType;
    queryFirstCount?: ServiceCounterDataType;
    queryNextCount?: ServiceCounterDataType;
    registerNodesCount?: ServiceCounterDataType;
    unregisterNodesCount?: ServiceCounterDataType;
}
/**

*/
export declare class SessionDiagnosticsDataType {
    sessionId: ec.NodeId;
    sessionName: string;
    clientDescription: ApplicationDescription;
    serverUri: string;
    endpointUrl: string;
    localeIds: string[];
    actualSessionTimeout: ec.Double;
    maxResponseMessageSize: ec.UInt32;
    clientConnectionTime: Date;
    clientLastContactTime: Date;
    currentSubscriptionsCount: ec.UInt32;
    currentMonitoredItemsCount: ec.UInt32;
    currentPublishRequestsInQueue: ec.UInt32;
    totalRequestCount: ServiceCounterDataType;
    unauthorizedRequestCount: ec.UInt32;
    readCount: ServiceCounterDataType;
    historyReadCount: ServiceCounterDataType;
    writeCount: ServiceCounterDataType;
    historyUpdateCount: ServiceCounterDataType;
    callCount: ServiceCounterDataType;
    createMonitoredItemsCount: ServiceCounterDataType;
    modifyMonitoredItemsCount: ServiceCounterDataType;
    setMonitoringModeCount: ServiceCounterDataType;
    setTriggeringCount: ServiceCounterDataType;
    deleteMonitoredItemsCount: ServiceCounterDataType;
    createSubscriptionCount: ServiceCounterDataType;
    modifySubscriptionCount: ServiceCounterDataType;
    setPublishingModeCount: ServiceCounterDataType;
    publishCount: ServiceCounterDataType;
    republishCount: ServiceCounterDataType;
    transferSubscriptionsCount: ServiceCounterDataType;
    deleteSubscriptionsCount: ServiceCounterDataType;
    addNodesCount: ServiceCounterDataType;
    addReferencesCount: ServiceCounterDataType;
    deleteNodesCount: ServiceCounterDataType;
    deleteReferencesCount: ServiceCounterDataType;
    browseCount: ServiceCounterDataType;
    browseNextCount: ServiceCounterDataType;
    translateBrowsePathsToNodeIdsCount: ServiceCounterDataType;
    queryFirstCount: ServiceCounterDataType;
    queryNextCount: ServiceCounterDataType;
    registerNodesCount: ServiceCounterDataType;
    unregisterNodesCount: ServiceCounterDataType;
    constructor(options?: ISessionDiagnosticsDataType);
    encode(out: DataStream): void;
    decode(inp: DataStream): void;
    clone(target?: SessionDiagnosticsDataType): SessionDiagnosticsDataType;
}
export declare function decodeSessionDiagnosticsDataType(inp: DataStream): SessionDiagnosticsDataType;
