/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import {StandaloneSubscribedDataSetDataType} from './StandaloneSubscribedDataSetDataType';
import {decodeStandaloneSubscribedDataSetDataType} from './StandaloneSubscribedDataSetDataType';
import {DataSetMetaDataType} from './DataSetMetaDataType';
import {decodeDataSetMetaDataType} from './DataSetMetaDataType';
import {EndpointDescription} from './EndpointDescription';
import {decodeEndpointDescription} from './EndpointDescription';
import {SecurityGroupDataType} from './SecurityGroupDataType';
import {decodeSecurityGroupDataType} from './SecurityGroupDataType';
import {PubSubKeyPushTargetDataType} from './PubSubKeyPushTargetDataType';
import {decodePubSubKeyPushTargetDataType} from './PubSubKeyPushTargetDataType';
import * as ec from '../basic-types';
import {KeyValuePair} from './KeyValuePair';
import {decodeKeyValuePair} from './KeyValuePair';
import {DataStream} from '../basic-types/DataStream';
import {PubSubConfigurationDataType} from './PubSubConfigurationDataType';
import {IPubSubConfigurationDataType} from './PubSubConfigurationDataType';

export interface IPubSubConfiguration2DataType extends IPubSubConfigurationDataType {
  subscribedDataSets?: StandaloneSubscribedDataSetDataType[];
  dataSetClasses?: DataSetMetaDataType[];
  defaultSecurityKeyServices?: EndpointDescription[];
  securityGroups?: SecurityGroupDataType[];
  pubSubKeyPushTargets?: PubSubKeyPushTargetDataType[];
  configurationVersion?: ec.UInt32;
  configurationProperties?: KeyValuePair[];
}

/**

 * {@link https://reference.opcfoundation.org/nodesets/2/16816}
*/

export class PubSubConfiguration2DataType extends PubSubConfigurationDataType {
  subscribedDataSets: StandaloneSubscribedDataSetDataType[];
  dataSetClasses: DataSetMetaDataType[];
  defaultSecurityKeyServices: EndpointDescription[];
  securityGroups: SecurityGroupDataType[];
  pubSubKeyPushTargets: PubSubKeyPushTargetDataType[];
  configurationVersion: ec.UInt32;
  configurationProperties: KeyValuePair[];

 constructor( options?: IPubSubConfiguration2DataType) {
  options = options || {};
  super(options);
  this.subscribedDataSets = (options.subscribedDataSets != null) ? options.subscribedDataSets : [];
  this.dataSetClasses = (options.dataSetClasses != null) ? options.dataSetClasses : [];
  this.defaultSecurityKeyServices = (options.defaultSecurityKeyServices != null) ? options.defaultSecurityKeyServices : [];
  this.securityGroups = (options.securityGroups != null) ? options.securityGroups : [];
  this.pubSubKeyPushTargets = (options.pubSubKeyPushTargets != null) ? options.pubSubKeyPushTargets : [];
  this.configurationVersion = (options.configurationVersion != null) ? options.configurationVersion : 0;
  this.configurationProperties = (options.configurationProperties != null) ? options.configurationProperties : [];

 }


 encode( out: DataStream) {
  super.encode(out);
  ec.encodeArray(this.subscribedDataSets, out);
  ec.encodeArray(this.dataSetClasses, out);
  ec.encodeArray(this.defaultSecurityKeyServices, out);
  ec.encodeArray(this.securityGroups, out);
  ec.encodeArray(this.pubSubKeyPushTargets, out);
  ec.encodeUInt32(this.configurationVersion, out);
  ec.encodeArray(this.configurationProperties, out);

 }


 decode( inp: DataStream) {
  super.decode(inp);
  this.subscribedDataSets = ec.decodeArray(inp, decodeStandaloneSubscribedDataSetDataType);
  this.dataSetClasses = ec.decodeArray(inp, decodeDataSetMetaDataType);
  this.defaultSecurityKeyServices = ec.decodeArray(inp, decodeEndpointDescription);
  this.securityGroups = ec.decodeArray(inp, decodeSecurityGroupDataType);
  this.pubSubKeyPushTargets = ec.decodeArray(inp, decodePubSubKeyPushTargetDataType);
  this.configurationVersion = ec.decodeUInt32(inp);
  this.configurationProperties = ec.decodeArray(inp, decodeKeyValuePair);

 }


 toJSON() {
  const out: any = super.toJSON();
  out.SubscribedDataSets = this.subscribedDataSets;
  out.DataSetClasses = this.dataSetClasses;
  out.DefaultSecurityKeyServices = this.defaultSecurityKeyServices;
  out.SecurityGroups = this.securityGroups;
  out.PubSubKeyPushTargets = this.pubSubKeyPushTargets;
  out.ConfigurationVersion = this.configurationVersion;
  out.ConfigurationProperties = this.configurationProperties;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  super.fromJSON(inp);
  this.subscribedDataSets = ec.jsonDecodeStructArray( inp.SubscribedDataSets,StandaloneSubscribedDataSetDataType);
  this.dataSetClasses = ec.jsonDecodeStructArray( inp.DataSetClasses,DataSetMetaDataType);
  this.defaultSecurityKeyServices = ec.jsonDecodeStructArray( inp.DefaultSecurityKeyServices,EndpointDescription);
  this.securityGroups = ec.jsonDecodeStructArray( inp.SecurityGroups,SecurityGroupDataType);
  this.pubSubKeyPushTargets = ec.jsonDecodeStructArray( inp.PubSubKeyPushTargets,PubSubKeyPushTargetDataType);
  this.configurationVersion = inp.ConfigurationVersion;
  this.configurationProperties = ec.jsonDecodeStructArray( inp.ConfigurationProperties,KeyValuePair);

 }


 clone( target?: PubSubConfiguration2DataType): PubSubConfiguration2DataType {
  if (!target) {
   target = new PubSubConfiguration2DataType();
  }
  super.clone(target);
  if (this.subscribedDataSets) { target.subscribedDataSets = ec.cloneComplexArray(this.subscribedDataSets); }
  if (this.dataSetClasses) { target.dataSetClasses = ec.cloneComplexArray(this.dataSetClasses); }
  if (this.defaultSecurityKeyServices) { target.defaultSecurityKeyServices = ec.cloneComplexArray(this.defaultSecurityKeyServices); }
  if (this.securityGroups) { target.securityGroups = ec.cloneComplexArray(this.securityGroups); }
  if (this.pubSubKeyPushTargets) { target.pubSubKeyPushTargets = ec.cloneComplexArray(this.pubSubKeyPushTargets); }
  target.configurationVersion = this.configurationVersion;
  if (this.configurationProperties) { target.configurationProperties = ec.cloneComplexArray(this.configurationProperties); }
  return target;
 }


}
export function decodePubSubConfiguration2DataType( inp: DataStream): PubSubConfiguration2DataType {
  const obj = new PubSubConfiguration2DataType();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('PubSubConfiguration2DataType', PubSubConfiguration2DataType, new ExpandedNodeId(2 /*numeric id*/, 23602, 0));
