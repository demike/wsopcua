/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import * as ec from '../basic-types';
import {EventFilter} from './EventFilter';
import {DataStream} from '../basic-types/DataStream';
import {HistoryReadDetails} from './HistoryReadDetails';

export interface IReadEventDetails {
  numValuesPerNode?: ec.UInt32;
  startTime?: Date;
  endTime?: Date;
  filter?: EventFilter;
}

/**

*/

export class ReadEventDetails extends HistoryReadDetails {
  numValuesPerNode: ec.UInt32;
  startTime: Date;
  endTime: Date;
  filter: EventFilter;

 constructor( options?: IReadEventDetails) {
  options = options || {};
  super();
  this.numValuesPerNode = (options.numValuesPerNode != null) ? options.numValuesPerNode : 0;
  this.startTime = (options.startTime != null) ? options.startTime : new Date();
  this.endTime = (options.endTime != null) ? options.endTime : new Date();
  this.filter = (options.filter != null) ? options.filter : new EventFilter();

 }


 encode( out: DataStream) {
  ec.encodeUInt32(this.numValuesPerNode, out);
  ec.encodeDateTime(this.startTime, out);
  ec.encodeDateTime(this.endTime, out);
  this.filter.encode(out);

 }


 decode( inp: DataStream) {
  this.numValuesPerNode = ec.decodeUInt32(inp);
  this.startTime = ec.decodeDateTime(inp);
  this.endTime = ec.decodeDateTime(inp);
  this.filter.decode(inp);

 }


 toJSON() {
  const out: any = {};
  out.NumValuesPerNode = this.numValuesPerNode;
  out.StartTime = ec.jsonEncodeDateTime(this.startTime);
  out.EndTime = ec.jsonEncodeDateTime(this.endTime);
  out.Filter = this.filter;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.numValuesPerNode = inp.NumValuesPerNode;
  this.startTime = ec.jsonDecodeDateTime(inp.StartTime);
  this.endTime = ec.jsonDecodeDateTime(inp.EndTime);
  this.filter.fromJSON(inp.Filter);

 }


 clone( target?: ReadEventDetails): ReadEventDetails {
  if (!target) {
   target = new ReadEventDetails();
  }
  target.numValuesPerNode = this.numValuesPerNode;
  target.startTime = this.startTime;
  target.endTime = this.endTime;
  if (this.filter) { target.filter = this.filter.clone(); }
  return target;
 }


}
export function decodeReadEventDetails( inp: DataStream): ReadEventDetails {
  const obj = new ReadEventDetails();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('ReadEventDetails', ReadEventDetails, new ExpandedNodeId(2 /*numeric id*/, 646, 0));
