/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import * as ec from '../basic-types';
import {ExtensionObject, encodeExtensionObject, decodeExtensionObject, jsonEncodeExtensionObject, jsonDecodeExtensionObject} from '../basic-types/extension_object';
import {DataStream} from '../basic-types';
import {TypeNode} from '.';
import {ITypeNode} from '.';

export interface IDataTypeNode extends ITypeNode {
  isAbstract?: boolean;
  dataTypeDefinition?: ExtensionObject;
}

/**

*/

export class DataTypeNode extends TypeNode {
  isAbstract: boolean;
  dataTypeDefinition: ExtensionObject | null;

 constructor( options?: IDataTypeNode) {
  options = options || {};
  super(options);
  this.isAbstract = (options.isAbstract != null) ? options.isAbstract : false;
  this.dataTypeDefinition = (options.dataTypeDefinition != null) ? options.dataTypeDefinition : null;

 }


 encode( out: DataStream) {
  super.encode(out);
  ec.encodeBoolean(this.isAbstract, out);
  encodeExtensionObject(this.dataTypeDefinition, out);

 }


 decode( inp: DataStream) {
  super.decode(inp);
  this.isAbstract = ec.decodeBoolean(inp);
  this.dataTypeDefinition = decodeExtensionObject(inp);

 }


 toJSON() {
  const out: any = super.toJSON();
  out.IsAbstract = this.isAbstract;
  out.DataTypeDefinition = jsonEncodeExtensionObject(this.dataTypeDefinition);
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  super.fromJSON(inp);
  this.isAbstract = inp.IsAbstract;
  this.dataTypeDefinition = jsonDecodeExtensionObject(inp.DataTypeDefinition);

 }


 clone( target?: DataTypeNode): DataTypeNode {
  if (!target) {
   target = new DataTypeNode();
  }
  super.clone(target);
  target.isAbstract = this.isAbstract;
  target.dataTypeDefinition = this.dataTypeDefinition;
  return target;
 }


}
export function decodeDataTypeNode( inp: DataStream): DataTypeNode {
  const obj = new DataTypeNode();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory';
import { ExpandedNodeId } from '../nodeid';
register_class_definition('DataTypeNode', DataTypeNode, new ExpandedNodeId(2 /*numeric id*/, 284, 0));
