/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import {PublishedVariableDataType} from '.';
import {decodePublishedVariableDataType} from '.';
import * as ec from '../basic-types';
import {DataStream} from '../basic-types';
import {PublishedDataSetSourceDataType} from '.';

export interface IPublishedDataItemsDataType {
  publishedData?: PublishedVariableDataType[];
}

/**

*/

export class PublishedDataItemsDataType extends PublishedDataSetSourceDataType {
  publishedData: PublishedVariableDataType[];

 constructor( options?: IPublishedDataItemsDataType) {
  options = options || {};
  super();
  this.publishedData = (options.publishedData != null) ? options.publishedData : [];

 }


 encode( out: DataStream) {
  ec.encodeArray(this.publishedData, out);

 }


 decode( inp: DataStream) {
  this.publishedData = ec.decodeArray(inp, decodePublishedVariableDataType);

 }


 toJSON() {
  const out: any = {};
  out.PublishedData = this.publishedData;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.publishedData = ec.jsonDecodeStructArray( inp.PublishedData,PublishedVariableDataType);

 }


 clone( target?: PublishedDataItemsDataType): PublishedDataItemsDataType {
  if (!target) {
   target = new PublishedDataItemsDataType();
  }
  if (this.publishedData) { target.publishedData = ec.cloneComplexArray(this.publishedData); }
  return target;
 }


}
export function decodePublishedDataItemsDataType( inp: DataStream): PublishedDataItemsDataType {
  const obj = new PublishedDataItemsDataType();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory';
import { ExpandedNodeId } from '../nodeid';
register_class_definition('PublishedDataItemsDataType', PublishedDataItemsDataType, new ExpandedNodeId(2 /*numeric id*/, 15679, 0));
