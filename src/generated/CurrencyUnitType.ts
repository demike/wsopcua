/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import * as ec from '../basic-types';
import {LocalizedText} from './LocalizedText';
import {DataStream} from '../basic-types/DataStream';

export type ICurrencyUnitType = Partial<CurrencyUnitType>;

/**

 * {@link https://reference.opcfoundation.org/nodesets/4/15580}
*/

export class CurrencyUnitType {
  numericCode: ec.Int16;
  exponent: ec.SByte;
  alphabeticCode: string | null;
  currency: LocalizedText;

 constructor( options?: ICurrencyUnitType | null) {
  options = options || {};
  this.numericCode = (options.numericCode != null) ? options.numericCode : 0;
  this.exponent = (options.exponent != null) ? options.exponent : 0;
  this.alphabeticCode = (options.alphabeticCode != null) ? options.alphabeticCode : null;
  this.currency = (options.currency != null) ? options.currency : new LocalizedText();

 }


 encode( out: DataStream) {
  ec.encodeInt16(this.numericCode, out);
  ec.encodeSByte(this.exponent, out);
  ec.encodeString(this.alphabeticCode, out);
  this.currency.encode(out);

 }


 decode( inp: DataStream) {
  this.numericCode = ec.decodeInt16(inp);
  this.exponent = ec.decodeSByte(inp);
  this.alphabeticCode = ec.decodeString(inp);
  this.currency.decode(inp);

 }


 toJSON() {
  const out: any = {};
  out.NumericCode = this.numericCode;
  out.Exponent = this.exponent;
  out.AlphabeticCode = this.alphabeticCode;
  out.Currency = this.currency;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.numericCode = inp.NumericCode;
  this.exponent = inp.Exponent;
  this.alphabeticCode = inp.AlphabeticCode;
  this.currency.fromJSON(inp.Currency);

 }


 clone( target?: CurrencyUnitType): CurrencyUnitType {
  if (!target) {
   target = new CurrencyUnitType();
  }
  target.numericCode = this.numericCode;
  target.exponent = this.exponent;
  target.alphabeticCode = this.alphabeticCode;
  if (this.currency) { target.currency = this.currency.clone(); }
  return target;
 }


}
export function decodeCurrencyUnitType( inp: DataStream): CurrencyUnitType {
  const obj = new CurrencyUnitType();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('CurrencyUnitType', CurrencyUnitType, new ExpandedNodeId(2 /*numeric id*/, 23507, 0));
