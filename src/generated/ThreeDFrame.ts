/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import {ThreeDCartesianCoordinates} from '.';
import {ThreeDOrientation} from '.';
import {DataStream} from '../basic-types';
import {Frame} from '.';

export interface IThreeDFrame {
  cartesianCoordinates?: ThreeDCartesianCoordinates;
  orientation?: ThreeDOrientation;
}

/**

*/

export class ThreeDFrame extends Frame {
  cartesianCoordinates: ThreeDCartesianCoordinates;
  orientation: ThreeDOrientation;

 constructor( options?: IThreeDFrame) {
  options = options || {};
  super();
  this.cartesianCoordinates = (options.cartesianCoordinates != null) ? options.cartesianCoordinates : new ThreeDCartesianCoordinates();
  this.orientation = (options.orientation != null) ? options.orientation : new ThreeDOrientation();

 }


 encode( out: DataStream) {
  this.cartesianCoordinates.encode(out);
  this.orientation.encode(out);

 }


 decode( inp: DataStream) {
  this.cartesianCoordinates.decode(inp);
  this.orientation.decode(inp);

 }


 toJSON() {
  const out: any = {};
  out.CartesianCoordinates = this.cartesianCoordinates;
  out.Orientation = this.orientation;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.cartesianCoordinates.fromJSON(inp.CartesianCoordinates);
  this.orientation.fromJSON(inp.Orientation);

 }


 clone( target?: ThreeDFrame): ThreeDFrame {
  if (!target) {
   target = new ThreeDFrame();
  }
  if (this.cartesianCoordinates) { target.cartesianCoordinates = this.cartesianCoordinates.clone(); }
  if (this.orientation) { target.orientation = this.orientation.clone(); }
  return target;
 }


}
export function decodeThreeDFrame( inp: DataStream): ThreeDFrame {
  const obj = new ThreeDFrame();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory';
import { ExpandedNodeId } from '../nodeid';
register_class_definition('ThreeDFrame', ThreeDFrame, new ExpandedNodeId(2 /*numeric id*/, 18823, 0));
