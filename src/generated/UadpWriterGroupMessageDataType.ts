/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import * as ec from '../basic-types';
import {DataSetOrderingType, encodeDataSetOrderingType, decodeDataSetOrderingType} from '.';
import {UadpNetworkMessageContentMask, encodeUadpNetworkMessageContentMask, decodeUadpNetworkMessageContentMask} from '.';
import {DataStream} from '../basic-types';
import {WriterGroupMessageDataType} from '.';

export interface IUadpWriterGroupMessageDataType {
  groupVersion?: ec.UInt32;
  dataSetOrdering?: DataSetOrderingType;
  networkMessageContentMask?: UadpNetworkMessageContentMask;
  samplingOffset?: ec.Double;
  publishingOffset?: ec.Double[];
}

/**

*/

export class UadpWriterGroupMessageDataType extends WriterGroupMessageDataType {
  groupVersion: ec.UInt32;
  dataSetOrdering: DataSetOrderingType;
  networkMessageContentMask: UadpNetworkMessageContentMask;
  samplingOffset: ec.Double;
  publishingOffset: ec.Double[];

 constructor( options?: IUadpWriterGroupMessageDataType) {
  options = options || {};
  super();
  this.groupVersion = (options.groupVersion != null) ? options.groupVersion : 0;
  this.dataSetOrdering = (options.dataSetOrdering != null) ? options.dataSetOrdering : null;
  this.networkMessageContentMask = (options.networkMessageContentMask != null) ? options.networkMessageContentMask : null;
  this.samplingOffset = (options.samplingOffset != null) ? options.samplingOffset : 0;
  this.publishingOffset = (options.publishingOffset != null) ? options.publishingOffset : [];

 }


 encode( out: DataStream) {
  ec.encodeUInt32(this.groupVersion, out);
  encodeDataSetOrderingType(this.dataSetOrdering, out);
  encodeUadpNetworkMessageContentMask(this.networkMessageContentMask, out);
  ec.encodeDouble(this.samplingOffset, out);
  ec.encodeArray(this.publishingOffset, out, ec.encodeDouble);

 }


 decode( inp: DataStream) {
  this.groupVersion = ec.decodeUInt32(inp);
  this.dataSetOrdering = decodeDataSetOrderingType(inp);
  this.networkMessageContentMask = decodeUadpNetworkMessageContentMask(inp);
  this.samplingOffset = ec.decodeDouble(inp);
  this.publishingOffset = ec.decodeArray(inp, ec.decodeDouble);

 }


 toJSON() {
  const out: any = {};
  out.GroupVersion = this.groupVersion;
  out.DataSetOrdering = this.dataSetOrdering;
  out.NetworkMessageContentMask = this.networkMessageContentMask;
  out.SamplingOffset = this.samplingOffset;
  out.PublishingOffset = this.publishingOffset;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.groupVersion = inp.GroupVersion;
  this.dataSetOrdering = inp.DataSetOrdering;
  this.networkMessageContentMask = inp.NetworkMessageContentMask;
  this.samplingOffset = inp.SamplingOffset;
  this.publishingOffset = inp.PublishingOffset;

 }


 clone( target?: UadpWriterGroupMessageDataType): UadpWriterGroupMessageDataType {
  if (!target) {
   target = new UadpWriterGroupMessageDataType();
  }
  target.groupVersion = this.groupVersion;
  target.dataSetOrdering = this.dataSetOrdering;
  target.networkMessageContentMask = this.networkMessageContentMask;
  target.samplingOffset = this.samplingOffset;
  target.publishingOffset = ec.cloneArray(this.publishingOffset);
  return target;
 }


}
export function decodeUadpWriterGroupMessageDataType( inp: DataStream): UadpWriterGroupMessageDataType {
  const obj = new UadpWriterGroupMessageDataType();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory';
import { ExpandedNodeId } from '../nodeid';
register_class_definition('UadpWriterGroupMessageDataType', UadpWriterGroupMessageDataType, new ExpandedNodeId(2 /*numeric id*/, 15715, 0));
