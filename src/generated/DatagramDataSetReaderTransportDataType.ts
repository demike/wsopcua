/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import {ExtensionObject, encodeExtensionObject, decodeExtensionObject, jsonEncodeExtensionObject, jsonDecodeExtensionObject} from '../basic-types/extension_object';
import * as ec from '../basic-types';
import {DataStream} from '../basic-types/DataStream';
import {DataSetReaderTransportDataType} from './DataSetReaderTransportDataType';

export interface IDatagramDataSetReaderTransportDataType {
  address?: ExtensionObject;
  qosCategory?: string;
  datagramQos?: ExtensionObject[];
  topic?: string;
}

/**

 * {@link https://reference.opcfoundation.org/nodesets/2/16837}
*/

export class DatagramDataSetReaderTransportDataType extends DataSetReaderTransportDataType {
  address: ExtensionObject | null;
  qosCategory: string | null;
  datagramQos: ExtensionObject[];
  topic: string | null;

 constructor( options?: IDatagramDataSetReaderTransportDataType) {
  options = options || {};
  super();
  this.address = (options.address != null) ? options.address : null;
  this.qosCategory = (options.qosCategory != null) ? options.qosCategory : null;
  this.datagramQos = (options.datagramQos != null) ? options.datagramQos : [];
  this.topic = (options.topic != null) ? options.topic : null;

 }


 encode( out: DataStream) {
  encodeExtensionObject(this.address, out);
  ec.encodeString(this.qosCategory, out);
  ec.encodeArray(this.datagramQos, out, encodeExtensionObject);
  ec.encodeString(this.topic, out);

 }


 decode( inp: DataStream) {
  this.address = decodeExtensionObject(inp);
  this.qosCategory = ec.decodeString(inp);
  this.datagramQos = ec.decodeArray(inp, decodeExtensionObject) ?? [];
  this.topic = ec.decodeString(inp);

 }


 toJSON() {
  const out: any = {};
  out.Address = jsonEncodeExtensionObject(this.address);
  out.QosCategory = this.qosCategory;
  out.DatagramQos = ec.jsonEncodeArray(this.datagramQos, jsonEncodeExtensionObject);
  out.Topic = this.topic;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.address = jsonDecodeExtensionObject(inp.Address);
  this.qosCategory = inp.QosCategory;
  this.datagramQos = ec.jsonDecodeArray( inp.DatagramQos, jsonDecodeExtensionObject);
  this.topic = inp.Topic;

 }


 clone( target?: DatagramDataSetReaderTransportDataType): DatagramDataSetReaderTransportDataType {
  if (!target) {
   target = new DatagramDataSetReaderTransportDataType();
  }
  target.address = this.address;
  target.qosCategory = this.qosCategory;
  target.datagramQos = ec.cloneArray(this.datagramQos);
  target.topic = this.topic;
  return target;
 }


}
export function decodeDatagramDataSetReaderTransportDataType( inp: DataStream): DatagramDataSetReaderTransportDataType {
  const obj = new DatagramDataSetReaderTransportDataType();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('DatagramDataSetReaderTransportDataType', DatagramDataSetReaderTransportDataType, new ExpandedNodeId(2 /*numeric id*/, 23866, 0));
