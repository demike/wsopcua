/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import {RequestHeader} from './RequestHeader';
import * as ec from '../basic-types';
import {DataStream} from '../basic-types/DataStream';

export interface ISetTriggeringRequest {
  requestHeader?: RequestHeader;
  subscriptionId?: ec.UInt32;
  triggeringItemId?: ec.UInt32;
  linksToAdd?: ec.UInt32[];
  linksToRemove?: ec.UInt32[];
}

/**

 * {@link https://reference.opcfoundation.org/nodesets/4/16199}
*/

export class SetTriggeringRequest {
  requestHeader: RequestHeader;
  subscriptionId: ec.UInt32;
  triggeringItemId: ec.UInt32;
  linksToAdd: ec.UInt32[];
  linksToRemove: ec.UInt32[];

 constructor( options?: ISetTriggeringRequest) {
  options = options || {};
  this.requestHeader = (options.requestHeader != null) ? options.requestHeader : new RequestHeader();
  this.subscriptionId = (options.subscriptionId != null) ? options.subscriptionId : 0;
  this.triggeringItemId = (options.triggeringItemId != null) ? options.triggeringItemId : 0;
  this.linksToAdd = (options.linksToAdd != null) ? options.linksToAdd : [];
  this.linksToRemove = (options.linksToRemove != null) ? options.linksToRemove : [];

 }


 encode( out: DataStream) {
  this.requestHeader.encode(out);
  ec.encodeUInt32(this.subscriptionId, out);
  ec.encodeUInt32(this.triggeringItemId, out);
  ec.encodeArray(this.linksToAdd, out, ec.encodeUInt32);
  ec.encodeArray(this.linksToRemove, out, ec.encodeUInt32);

 }


 decode( inp: DataStream) {
  this.requestHeader.decode(inp);
  this.subscriptionId = ec.decodeUInt32(inp);
  this.triggeringItemId = ec.decodeUInt32(inp);
  this.linksToAdd = ec.decodeArray(inp, ec.decodeUInt32);
  this.linksToRemove = ec.decodeArray(inp, ec.decodeUInt32);

 }


 toJSON() {
  const out: any = {};
  out.RequestHeader = this.requestHeader;
  out.SubscriptionId = this.subscriptionId;
  out.TriggeringItemId = this.triggeringItemId;
  out.LinksToAdd = this.linksToAdd;
  out.LinksToRemove = this.linksToRemove;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.requestHeader.fromJSON(inp.RequestHeader);
  this.subscriptionId = inp.SubscriptionId;
  this.triggeringItemId = inp.TriggeringItemId;
  this.linksToAdd = inp.LinksToAdd;
  this.linksToRemove = inp.LinksToRemove;

 }


 clone( target?: SetTriggeringRequest): SetTriggeringRequest {
  if (!target) {
   target = new SetTriggeringRequest();
  }
  if (this.requestHeader) { target.requestHeader = this.requestHeader.clone(); }
  target.subscriptionId = this.subscriptionId;
  target.triggeringItemId = this.triggeringItemId;
  target.linksToAdd = ec.cloneArray(this.linksToAdd);
  target.linksToRemove = ec.cloneArray(this.linksToRemove);
  return target;
 }


}
export function decodeSetTriggeringRequest( inp: DataStream): SetTriggeringRequest {
  const obj = new SetTriggeringRequest();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('SetTriggeringRequest', SetTriggeringRequest, new ExpandedNodeId(2 /*numeric id*/, 773, 0));
