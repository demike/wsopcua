/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import * as ec from '../basic-types';
import {DataStream} from '../basic-types/DataStream';
import {UserIdentityToken} from './UserIdentityToken';
import {IUserIdentityToken} from './UserIdentityToken';

export type IUserNameIdentityToken = Partial<UserNameIdentityToken>;

/**

*/

export class UserNameIdentityToken extends UserIdentityToken {
  userName: string | null;
  password: Uint8Array | null;
  encryptionAlgorithm: string | null;

 constructor( options?: IUserNameIdentityToken | null) {
  options = options || {};
  super(options);
  this.userName = (options.userName != null) ? options.userName : null;
  this.password = (options.password != null) ? options.password : null;
  this.encryptionAlgorithm = (options.encryptionAlgorithm != null) ? options.encryptionAlgorithm : null;

 }


 encode( out: DataStream) {
  super.encode(out);
  ec.encodeString(this.userName, out);
  ec.encodeByteString(this.password, out);
  ec.encodeString(this.encryptionAlgorithm, out);

 }


 decode( inp: DataStream) {
  super.decode(inp);
  this.userName = ec.decodeString(inp);
  this.password = ec.decodeByteString(inp);
  this.encryptionAlgorithm = ec.decodeString(inp);

 }


 toJSON() {
  const out: any = super.toJSON();
  out.UserName = this.userName;
  out.Password = ec.jsonEncodeByteString(this.password);
  out.EncryptionAlgorithm = this.encryptionAlgorithm;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  super.fromJSON(inp);
  this.userName = inp.UserName;
  this.password = ec.jsonDecodeByteString(inp.Password);
  this.encryptionAlgorithm = inp.EncryptionAlgorithm;

 }


 clone( target?: UserNameIdentityToken): UserNameIdentityToken {
  if (!target) {
   target = new UserNameIdentityToken();
  }
  super.clone(target);
  target.userName = this.userName;
  target.password = this.password;
  target.encryptionAlgorithm = this.encryptionAlgorithm;
  return target;
 }


}
export function decodeUserNameIdentityToken( inp: DataStream): UserNameIdentityToken {
  const obj = new UserNameIdentityToken();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('UserNameIdentityToken', UserNameIdentityToken, new ExpandedNodeId(2 /*numeric id*/, 324, 0));
