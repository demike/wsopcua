/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import * as ec from '../basic-types';
import {DataStream} from '../basic-types/DataStream';

export type ITwoByteNodeId = Partial<TwoByteNodeId>;

/**

*/

export class TwoByteNodeId {
  identifier: ec.Byte;

 constructor( options?: ITwoByteNodeId | undefined) {
  options = options || {};
  this.identifier = (options.identifier != null) ? options.identifier : 0;

 }


 encode( out: DataStream) {
  ec.encodeByte(this.identifier, out);

 }


 decode( inp: DataStream) {
  this.identifier = ec.decodeByte(inp);

 }


 toJSON() {
  const out: any = {};
  out.Identifier = this.identifier;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.identifier = inp.Identifier;

 }


 clone( target?: TwoByteNodeId): TwoByteNodeId {
  if (!target) {
   target = new TwoByteNodeId();
  }
  target.identifier = this.identifier;
  return target;
 }


}
export function decodeTwoByteNodeId( inp: DataStream): TwoByteNodeId {
  const obj = new TwoByteNodeId();
   obj.decode(inp);
   return obj;

 }



