/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import {ResponseHeader} from './ResponseHeader';
import {DataStream} from '../basic-types/DataStream';

export interface ICloseSecureChannelResponse {
  responseHeader?: ResponseHeader;
}

/**

*/

export class CloseSecureChannelResponse {
  responseHeader: ResponseHeader;

 constructor( options?: ICloseSecureChannelResponse) {
  options = options || {};
  this.responseHeader = (options.responseHeader != null) ? options.responseHeader : new ResponseHeader();

 }


 encode( out: DataStream) {
  this.responseHeader.encode(out);

 }


 decode( inp: DataStream) {
  this.responseHeader.decode(inp);

 }


 toJSON() {
  const out: any = {};
  out.ResponseHeader = this.responseHeader;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.responseHeader.fromJSON(inp.ResponseHeader);

 }


 clone( target?: CloseSecureChannelResponse): CloseSecureChannelResponse {
  if (!target) {
   target = new CloseSecureChannelResponse();
  }
  if (this.responseHeader) { target.responseHeader = this.responseHeader.clone(); }
  return target;
 }


}
export function decodeCloseSecureChannelResponse( inp: DataStream): CloseSecureChannelResponse {
  const obj = new CloseSecureChannelResponse();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('CloseSecureChannelResponse', CloseSecureChannelResponse, new ExpandedNodeId(2 /*numeric id*/, 455, 0));
