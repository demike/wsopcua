/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import {ContentFilterElementResult} from './ContentFilterElementResult';
import {decodeContentFilterElementResult} from './ContentFilterElementResult';
import {DiagnosticInfo} from './DiagnosticInfo';
import {decodeDiagnosticInfo} from './DiagnosticInfo';
import * as ec from '../basic-types';
import {DataStream} from '../basic-types/DataStream';

export interface IContentFilterResult {
  elementResults?: ContentFilterElementResult[];
  elementDiagnosticInfos?: DiagnosticInfo[];
}

/**

 * {@link https://reference.opcfoundation.org/nodesets/4/16134}
*/

export class ContentFilterResult {
  elementResults: ContentFilterElementResult[];
  elementDiagnosticInfos: DiagnosticInfo[];

 constructor( options?: IContentFilterResult) {
  options = options || {};
  this.elementResults = (options.elementResults != null) ? options.elementResults : [];
  this.elementDiagnosticInfos = (options.elementDiagnosticInfos != null) ? options.elementDiagnosticInfos : [];

 }


 encode( out: DataStream) {
  ec.encodeArray(this.elementResults, out);
  ec.encodeArray(this.elementDiagnosticInfos, out);

 }


 decode( inp: DataStream) {
  this.elementResults = ec.decodeArray(inp, decodeContentFilterElementResult);
  this.elementDiagnosticInfos = ec.decodeArray(inp, decodeDiagnosticInfo);

 }


 toJSON() {
  const out: any = {};
  out.ElementResults = this.elementResults;
  out.ElementDiagnosticInfos = this.elementDiagnosticInfos;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.elementResults = ec.jsonDecodeStructArray( inp.ElementResults,ContentFilterElementResult);
  this.elementDiagnosticInfos = ec.jsonDecodeStructArray( inp.ElementDiagnosticInfos,DiagnosticInfo);

 }


 clone( target?: ContentFilterResult): ContentFilterResult {
  if (!target) {
   target = new ContentFilterResult();
  }
  if (this.elementResults) { target.elementResults = ec.cloneComplexArray(this.elementResults); }
  if (this.elementDiagnosticInfos) { target.elementDiagnosticInfos = ec.cloneComplexArray(this.elementDiagnosticInfos); }
  return target;
 }


}
export function decodeContentFilterResult( inp: DataStream): ContentFilterResult {
  const obj = new ContentFilterResult();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('ContentFilterResult', ContentFilterResult, new ExpandedNodeId(2 /*numeric id*/, 607, 0));
