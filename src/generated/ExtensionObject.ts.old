

import * as ec from '../basic-types';
import {DataStream} from '../basic-types/DataStream';

export interface IExtensionObject {
		typeId? : ec.ExpandedNodeId;
		body? : ec.Byte[];
}

/**
A serialized object prefixed with its data type identifier.
*/

export class ExtensionObject {
 		typeId : ec.ExpandedNodeId;
		body : ec.Byte[];

	constructor(	options? : IExtensionObject) { 
		options = options || {};
		this.typeId= (options.typeId) ? options.typeId:null;
		this.body= (options.body) ? options.body:null;

	}


	encode(	out : DataStream) { 
		let encodingByte = 0;
		if (this.typeId) { encodingByte |= 1 << 0;}
		out.setUint8(encodingByte);
		if(this.typeId !== undefined) { ec.encodeExpandedNodeId(this.typeId,out); }
		ec.encodeArray(this.body,out,ec.encodeByte);

	}


	decode(	inp : DataStream) { 
		let encodingByte = inp.getUint8();
		let typeIdSpecified = (encodingByte & 1) != 0;
		let binaryBody = (encodingByte & 2) != 0;
		let xmlBody = (encodingByte & 4) != 0;
		let reserved1 = (encodingByte & 8) != 0;
		if(typeIdSpecified) {
			this.typeId = ec.decodeExpandedNodeId(inp);
		}
		this.body = ec.decodeArray(inp,ec.decodeByte);

	}


	clone(	target? : ExtensionObject) : ExtensionObject { 
		if(!target) {
			target = new ExtensionObject();
		}
		target.typeId = this.typeId;
		target.body = ec.cloneArray(this.body);
		return target;
	}


}
export function decodeExtensionObject(	inp : DataStream) : ExtensionObject { 
		let obj = new ExtensionObject(null);
			obj.decode(inp); 
			return obj;

	}



import {register_class_definition} from "../factory/factories_factories";
import { makeExpandedNodeId } from '../nodeid/expanded_nodeid';
import { generate_new_id } from '../factory';
register_class_definition("ExtensionObject",ExtensionObject, makeExpandedNodeId(generate_new_id()));