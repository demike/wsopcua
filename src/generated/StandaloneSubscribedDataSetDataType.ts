/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import * as ec from '../basic-types';
import {DataSetMetaDataType} from './DataSetMetaDataType';
import {ExtensionObject, encodeExtensionObject, decodeExtensionObject, jsonEncodeExtensionObject, jsonDecodeExtensionObject} from '../basic-types/extension_object';
import {DataStream} from '../basic-types/DataStream';
import {SubscribedDataSetDataType} from './SubscribedDataSetDataType';

export interface IStandaloneSubscribedDataSetDataType {
  name?: string;
  dataSetFolder?: string[];
  dataSetMetaData?: DataSetMetaDataType;
  subscribedDataSet?: ExtensionObject;
}

/**

 * {@link https://reference.opcfoundation.org/nodesets/2/16813}
*/

export class StandaloneSubscribedDataSetDataType extends SubscribedDataSetDataType {
  name: string | null;
  dataSetFolder: string[];
  dataSetMetaData: DataSetMetaDataType;
  subscribedDataSet: ExtensionObject | null;

 constructor( options?: IStandaloneSubscribedDataSetDataType) {
  options = options || {};
  super();
  this.name = (options.name != null) ? options.name : null;
  this.dataSetFolder = (options.dataSetFolder != null) ? options.dataSetFolder : [];
  this.dataSetMetaData = (options.dataSetMetaData != null) ? options.dataSetMetaData : new DataSetMetaDataType();
  this.subscribedDataSet = (options.subscribedDataSet != null) ? options.subscribedDataSet : null;

 }


 encode( out: DataStream) {
  ec.encodeString(this.name, out);
  ec.encodeArray(this.dataSetFolder, out, ec.encodeString);
  this.dataSetMetaData.encode(out);
  encodeExtensionObject(this.subscribedDataSet, out);

 }


 decode( inp: DataStream) {
  this.name = ec.decodeString(inp);
  this.dataSetFolder = ec.decodeArray(inp, ec.decodeString);
  this.dataSetMetaData.decode(inp);
  this.subscribedDataSet = decodeExtensionObject(inp);

 }


 toJSON() {
  const out: any = {};
  out.Name = this.name;
  out.DataSetFolder = this.dataSetFolder;
  out.DataSetMetaData = this.dataSetMetaData;
  out.SubscribedDataSet = jsonEncodeExtensionObject(this.subscribedDataSet);
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.name = inp.Name;
  this.dataSetFolder = inp.DataSetFolder;
  this.dataSetMetaData.fromJSON(inp.DataSetMetaData);
  this.subscribedDataSet = jsonDecodeExtensionObject(inp.SubscribedDataSet);

 }


 clone( target?: StandaloneSubscribedDataSetDataType): StandaloneSubscribedDataSetDataType {
  if (!target) {
   target = new StandaloneSubscribedDataSetDataType();
  }
  target.name = this.name;
  target.dataSetFolder = ec.cloneArray(this.dataSetFolder);
  if (this.dataSetMetaData) { target.dataSetMetaData = this.dataSetMetaData.clone(); }
  target.subscribedDataSet = this.subscribedDataSet;
  return target;
 }


}
export function decodeStandaloneSubscribedDataSetDataType( inp: DataStream): StandaloneSubscribedDataSetDataType {
  const obj = new StandaloneSubscribedDataSetDataType();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('StandaloneSubscribedDataSetDataType', StandaloneSubscribedDataSetDataType, new ExpandedNodeId(2 /*numeric id*/, 23852, 0));
