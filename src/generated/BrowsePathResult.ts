/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import * as ec from '../basic-types';
import {BrowsePathTarget} from './BrowsePathTarget';
import {decodeBrowsePathTarget} from './BrowsePathTarget';
import {DataStream} from '../basic-types/DataStream';

export type IBrowsePathResult = Partial<BrowsePathResult>;

/**

*/

export class BrowsePathResult {
  statusCode: ec.StatusCode;
  targets: (BrowsePathTarget)[];

 constructor( options?: IBrowsePathResult | null) {
  options = options || {};
  this.statusCode = (options.statusCode != null) ? options.statusCode : ec.StatusCodes.Good;
  this.targets = (options.targets != null) ? options.targets : [];

 }


 encode( out: DataStream) {
  ec.encodeStatusCode(this.statusCode, out);
  ec.encodeArray(this.targets, out);

 }


 decode( inp: DataStream) {
  this.statusCode = ec.decodeStatusCode(inp);
  this.targets = ec.decodeArray(inp, decodeBrowsePathTarget) ?? [];

 }


 toJSON() {
  const out: any = {};
  out.StatusCode = ec.jsonEncodeStatusCode(this.statusCode);
  out.Targets = this.targets;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.statusCode = ec.jsonDecodeStatusCode(inp.StatusCode);
  this.targets = ec.jsonDecodeStructArray( inp.Targets,BrowsePathTarget);

 }


 clone( target?: BrowsePathResult): BrowsePathResult {
  if (!target) {
   target = new BrowsePathResult();
  }
  target.statusCode = this.statusCode;
  if (this.targets) { target.targets = ec.cloneComplexArray(this.targets); }
  return target;
 }


}
export function decodeBrowsePathResult( inp: DataStream): BrowsePathResult {
  const obj = new BrowsePathResult();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('BrowsePathResult', BrowsePathResult, new ExpandedNodeId(2 /*numeric id*/, 551, 0));
