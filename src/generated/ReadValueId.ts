/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import * as ec from '../basic-types';
import {QualifiedName} from '.';
import {DataStream} from '../basic-types';

export interface IReadValueId {
  nodeId?: ec.NodeId;
  attributeId?: ec.UInt32;
  indexRange?: string;
  dataEncoding?: QualifiedName;
}

/**

*/

export class ReadValueId {
  nodeId: ec.NodeId;
  attributeId: ec.UInt32;
  indexRange: string | null;
  dataEncoding: QualifiedName;

 constructor( options?: IReadValueId) {
  options = options || {};
  this.nodeId = (options.nodeId != null) ? options.nodeId : ec.NodeId.NullNodeId;
  this.attributeId = (options.attributeId != null) ? options.attributeId : 0;
  this.indexRange = (options.indexRange != null) ? options.indexRange : null;
  this.dataEncoding = (options.dataEncoding != null) ? options.dataEncoding : new QualifiedName();

 }


 encode( out: DataStream) {
  ec.encodeNodeId(this.nodeId, out);
  ec.encodeUInt32(this.attributeId, out);
  ec.encodeString(this.indexRange, out);
  this.dataEncoding.encode(out);

 }


 decode( inp: DataStream) {
  this.nodeId = ec.decodeNodeId(inp);
  this.attributeId = ec.decodeUInt32(inp);
  this.indexRange = ec.decodeString(inp);
  this.dataEncoding.decode(inp);

 }


 toJSON() {
  const out: any = {};
  out.NodeId = ec.jsonEncodeNodeId(this.nodeId);
  out.AttributeId = this.attributeId;
  out.IndexRange = this.indexRange;
  out.DataEncoding = this.dataEncoding;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.nodeId = ec.jsonDecodeNodeId(inp.NodeId);
  this.attributeId = inp.AttributeId;
  this.indexRange = inp.IndexRange;
  this.dataEncoding.fromJSON(inp.DataEncoding);

 }


 clone( target?: ReadValueId): ReadValueId {
  if (!target) {
   target = new ReadValueId();
  }
  target.nodeId = this.nodeId;
  target.attributeId = this.attributeId;
  target.indexRange = this.indexRange;
  if (this.dataEncoding) { target.dataEncoding = this.dataEncoding.clone(); }
  return target;
 }


}
export function decodeReadValueId( inp: DataStream): ReadValueId {
  const obj = new ReadValueId();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory';
import { ExpandedNodeId } from '../nodeid';
register_class_definition('ReadValueId', ReadValueId, new ExpandedNodeId(2 /*numeric id*/, 628, 0));
