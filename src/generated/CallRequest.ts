/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import {RequestHeader} from './RequestHeader';
import {CallMethodRequest} from './CallMethodRequest';
import {decodeCallMethodRequest} from './CallMethodRequest';
import * as ec from '../basic-types';
import {DataStream} from '../basic-types/DataStream';

export interface ICallRequest {
  requestHeader?: RequestHeader;
  methodsToCall?: CallMethodRequest[];
}

/**

 * {@link https://reference.opcfoundation.org/nodesets/4/16175}
*/

export class CallRequest {
  requestHeader: RequestHeader;
  methodsToCall: CallMethodRequest[];

 constructor( options?: ICallRequest) {
  options = options || {};
  this.requestHeader = (options.requestHeader != null) ? options.requestHeader : new RequestHeader();
  this.methodsToCall = (options.methodsToCall != null) ? options.methodsToCall : [];

 }


 encode( out: DataStream) {
  this.requestHeader.encode(out);
  ec.encodeArray(this.methodsToCall, out);

 }


 decode( inp: DataStream) {
  this.requestHeader.decode(inp);
  this.methodsToCall = ec.decodeArray(inp, decodeCallMethodRequest) ?? [];

 }


 toJSON() {
  const out: any = {};
  out.RequestHeader = this.requestHeader;
  out.MethodsToCall = this.methodsToCall;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.requestHeader.fromJSON(inp.RequestHeader);
  this.methodsToCall = ec.jsonDecodeStructArray( inp.MethodsToCall,CallMethodRequest);

 }


 clone( target?: CallRequest): CallRequest {
  if (!target) {
   target = new CallRequest();
  }
  if (this.requestHeader) { target.requestHeader = this.requestHeader.clone(); }
  if (this.methodsToCall) { target.methodsToCall = ec.cloneComplexArray(this.methodsToCall); }
  return target;
 }


}
export function decodeCallRequest( inp: DataStream): CallRequest {
  const obj = new CallRequest();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('CallRequest', CallRequest, new ExpandedNodeId(2 /*numeric id*/, 712, 0));
