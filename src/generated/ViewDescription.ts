/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import * as ec from '../basic-types';
import {DataStream} from '../basic-types/DataStream';

export type IViewDescription = Partial<ViewDescription>;

/**

 * {@link https://reference.opcfoundation.org/nodesets/4/16097}
*/

export class ViewDescription {
  viewId: ec.NodeId;
  timestamp: Date;
  viewVersion: ec.UInt32;

 constructor( options?: IViewDescription | undefined) {
  options = options || {};
  this.viewId = (options.viewId != null) ? options.viewId : ec.NodeId.NullNodeId;
  this.timestamp = (options.timestamp != null) ? options.timestamp : new Date();
  this.viewVersion = (options.viewVersion != null) ? options.viewVersion : 0;

 }


 encode( out: DataStream) {
  ec.encodeNodeId(this.viewId, out);
  ec.encodeDateTime(this.timestamp, out);
  ec.encodeUInt32(this.viewVersion, out);

 }


 decode( inp: DataStream) {
  this.viewId = ec.decodeNodeId(inp);
  this.timestamp = ec.decodeDateTime(inp);
  this.viewVersion = ec.decodeUInt32(inp);

 }


 toJSON() {
  const out: any = {};
  out.ViewId = ec.jsonEncodeNodeId(this.viewId);
  out.Timestamp = ec.jsonEncodeDateTime(this.timestamp);
  out.ViewVersion = this.viewVersion;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.viewId = ec.jsonDecodeNodeId(inp.ViewId);
  this.timestamp = ec.jsonDecodeDateTime(inp.Timestamp);
  this.viewVersion = inp.ViewVersion;

 }


 clone( target?: ViewDescription): ViewDescription {
  if (!target) {
   target = new ViewDescription();
  }
  target.viewId = this.viewId;
  target.timestamp = this.timestamp;
  target.viewVersion = this.viewVersion;
  return target;
 }


}
export function decodeViewDescription( inp: DataStream): ViewDescription {
  const obj = new ViewDescription();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('ViewDescription', ViewDescription, new ExpandedNodeId(2 /*numeric id*/, 513, 0));
