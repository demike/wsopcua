/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import * as ec from '../basic-types';
import {DataStream} from '../basic-types/DataStream';

export interface ITransferResult {
  statusCode?: ec.StatusCode;
  availableSequenceNumbers?: ec.UInt32[];
}

/**

*/

export class TransferResult {
  statusCode: ec.StatusCode | null;
  availableSequenceNumbers: ec.UInt32[];

 constructor( options?: ITransferResult) {
  options = options || {};
  this.statusCode = (options.statusCode != null) ? options.statusCode : null;
  this.availableSequenceNumbers = (options.availableSequenceNumbers != null) ? options.availableSequenceNumbers : [];

 }


 encode( out: DataStream) {
  ec.encodeStatusCode(this.statusCode, out);
  ec.encodeArray(this.availableSequenceNumbers, out, ec.encodeUInt32);

 }


 decode( inp: DataStream) {
  this.statusCode = ec.decodeStatusCode(inp);
  this.availableSequenceNumbers = ec.decodeArray(inp, ec.decodeUInt32);

 }


 toJSON() {
  const out: any = {};
  out.StatusCode = ec.jsonEncodeStatusCode(this.statusCode);
  out.AvailableSequenceNumbers = this.availableSequenceNumbers;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.statusCode = ec.jsonDecodeStatusCode(inp.StatusCode);
  this.availableSequenceNumbers = inp.AvailableSequenceNumbers;

 }


 clone( target?: TransferResult): TransferResult {
  if (!target) {
   target = new TransferResult();
  }
  target.statusCode = this.statusCode;
  target.availableSequenceNumbers = ec.cloneArray(this.availableSequenceNumbers);
  return target;
 }


}
export function decodeTransferResult( inp: DataStream): TransferResult {
  const obj = new TransferResult();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('TransferResult', TransferResult, new ExpandedNodeId(2 /*numeric id*/, 838, 0));
