/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import {DataValue} from './DataValue';
import {decodeDataValue} from './DataValue';
import * as ec from '../basic-types';
import {DataStream} from '../basic-types/DataStream';

export interface IHistoryData {
  dataValues?: DataValue[];
}

/**

 * {@link https://reference.opcfoundation.org/nodesets/4/16152}
*/

export class HistoryData {
  dataValues: DataValue[];

 constructor( options?: IHistoryData) {
  options = options || {};
  this.dataValues = (options.dataValues != null) ? options.dataValues : [];

 }


 encode( out: DataStream) {
  ec.encodeArray(this.dataValues, out);

 }


 decode( inp: DataStream) {
  this.dataValues = ec.decodeArray(inp, decodeDataValue);

 }


 toJSON() {
  const out: any = {};
  out.DataValues = this.dataValues;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.dataValues = ec.jsonDecodeStructArray( inp.DataValues,DataValue);

 }


 clone( target?: HistoryData): HistoryData {
  if (!target) {
   target = new HistoryData();
  }
  if (this.dataValues) { target.dataValues = ec.cloneComplexArray(this.dataValues); }
  return target;
 }


}
export function decodeHistoryData( inp: DataStream): HistoryData {
  const obj = new HistoryData();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('HistoryData', HistoryData, new ExpandedNodeId(2 /*numeric id*/, 656, 0));
