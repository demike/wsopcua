/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import * as ec from '../basic-types';
import {HistoryUpdateType, encodeHistoryUpdateType, decodeHistoryUpdateType} from './HistoryUpdateType';
import {DataStream} from '../basic-types/DataStream';

export interface IModificationInfo {
  modificationTime?: Date;
  updateType?: HistoryUpdateType;
  userName?: string;
}

/**

 * {@link https://reference.opcfoundation.org/nodesets/4/16153}
*/

export class ModificationInfo {
  modificationTime: Date;
  updateType: HistoryUpdateType;
  userName: string | null;

 constructor( options?: IModificationInfo) {
  options = options || {};
  this.modificationTime = (options.modificationTime != null) ? options.modificationTime : new Date();
  this.updateType = (options.updateType != null) ? options.updateType : null;
  this.userName = (options.userName != null) ? options.userName : null;

 }


 encode( out: DataStream) {
  ec.encodeDateTime(this.modificationTime, out);
  encodeHistoryUpdateType(this.updateType, out);
  ec.encodeString(this.userName, out);

 }


 decode( inp: DataStream) {
  this.modificationTime = ec.decodeDateTime(inp);
  this.updateType = decodeHistoryUpdateType(inp);
  this.userName = ec.decodeString(inp);

 }


 toJSON() {
  const out: any = {};
  out.ModificationTime = ec.jsonEncodeDateTime(this.modificationTime);
  out.UpdateType = this.updateType;
  out.UserName = this.userName;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.modificationTime = ec.jsonDecodeDateTime(inp.ModificationTime);
  this.updateType = inp.UpdateType;
  this.userName = inp.UserName;

 }


 clone( target?: ModificationInfo): ModificationInfo {
  if (!target) {
   target = new ModificationInfo();
  }
  target.modificationTime = this.modificationTime;
  target.updateType = this.updateType;
  target.userName = this.userName;
  return target;
 }


}
export function decodeModificationInfo( inp: DataStream): ModificationInfo {
  const obj = new ModificationInfo();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('ModificationInfo', ModificationInfo, new ExpandedNodeId(2 /*numeric id*/, 11226, 0));
