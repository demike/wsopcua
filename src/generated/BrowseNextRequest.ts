/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import {RequestHeader} from './RequestHeader';
import * as ec from '../basic-types';
import {DataStream} from '../basic-types/DataStream';

export interface IBrowseNextRequest {
  requestHeader?: RequestHeader;
  releaseContinuationPoints?: boolean;
  continuationPoints?: Uint8Array[];
}

/**

*/

export class BrowseNextRequest {
  requestHeader: RequestHeader;
  releaseContinuationPoints: boolean;
  continuationPoints: Uint8Array[];

 constructor( options?: IBrowseNextRequest) {
  options = options || {};
  this.requestHeader = (options.requestHeader != null) ? options.requestHeader : new RequestHeader();
  this.releaseContinuationPoints = (options.releaseContinuationPoints != null) ? options.releaseContinuationPoints : false;
  this.continuationPoints = (options.continuationPoints != null) ? options.continuationPoints : [];

 }


 encode( out: DataStream) {
  this.requestHeader.encode(out);
  ec.encodeBoolean(this.releaseContinuationPoints, out);
  ec.encodeArray(this.continuationPoints, out, ec.encodeByteString);

 }


 decode( inp: DataStream) {
  this.requestHeader.decode(inp);
  this.releaseContinuationPoints = ec.decodeBoolean(inp);
  this.continuationPoints = ec.decodeArray(inp, ec.decodeByteString);

 }


 toJSON() {
  const out: any = {};
  out.RequestHeader = this.requestHeader;
  out.ReleaseContinuationPoints = this.releaseContinuationPoints;
  out.ContinuationPoints = ec.jsonEncodeArray(this.continuationPoints, ec.jsonEncodeByteString);
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.requestHeader.fromJSON(inp.RequestHeader);
  this.releaseContinuationPoints = inp.ReleaseContinuationPoints;
  this.continuationPoints = ec.jsonDecodeArray( inp.ContinuationPoints, ec.jsonDecodeByteString);

 }


 clone( target?: BrowseNextRequest): BrowseNextRequest {
  if (!target) {
   target = new BrowseNextRequest();
  }
  if (this.requestHeader) { target.requestHeader = this.requestHeader.clone(); }
  target.releaseContinuationPoints = this.releaseContinuationPoints;
  target.continuationPoints = ec.cloneArray(this.continuationPoints);
  return target;
 }


}
export function decodeBrowseNextRequest( inp: DataStream): BrowseNextRequest {
  const obj = new BrowseNextRequest();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('BrowseNextRequest', BrowseNextRequest, new ExpandedNodeId(2 /*numeric id*/, 533, 0));
