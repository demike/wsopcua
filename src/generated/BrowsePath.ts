/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import * as ec from '../basic-types';
import {RelativePath} from './RelativePath';
import {DataStream} from '../basic-types/DataStream';

export type IBrowsePath = Partial<BrowsePath>;

/**

*/

export class BrowsePath {
  startingNode: ec.NodeId;
  relativePath: RelativePath;

 constructor( options?: IBrowsePath | null) {
  options = options || {};
  this.startingNode = (options.startingNode != null) ? options.startingNode : ec.NodeId.NullNodeId;
  this.relativePath = (options.relativePath != null) ? options.relativePath : new RelativePath();

 }


 encode( out: DataStream) {
  ec.encodeNodeId(this.startingNode, out);
  this.relativePath.encode(out);

 }


 decode( inp: DataStream) {
  this.startingNode = ec.decodeNodeId(inp);
  this.relativePath.decode(inp);

 }


 toJSON() {
  const out: any = {};
  out.StartingNode = ec.jsonEncodeNodeId(this.startingNode);
  out.RelativePath = this.relativePath;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.startingNode = ec.jsonDecodeNodeId(inp.StartingNode);
  this.relativePath.fromJSON(inp.RelativePath);

 }


 clone( target?: BrowsePath): BrowsePath {
  if (!target) {
   target = new BrowsePath();
  }
  target.startingNode = this.startingNode;
  if (this.relativePath) { target.relativePath = this.relativePath.clone(); }
  return target;
 }


}
export function decodeBrowsePath( inp: DataStream): BrowsePath {
  const obj = new BrowsePath();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('BrowsePath', BrowsePath, new ExpandedNodeId(2 /*numeric id*/, 545, 0));
