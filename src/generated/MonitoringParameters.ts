/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import * as ec from '../basic-types';
import {ExtensionObject, encodeExtensionObject, decodeExtensionObject, jsonEncodeExtensionObject, jsonDecodeExtensionObject} from '../basic-types/extension_object';
import {DataStream} from '../basic-types/DataStream';

export type IMonitoringParameters = Partial<MonitoringParameters>;

/**

 * {@link https://reference.opcfoundation.org/nodesets/4/16188}
*/

export class MonitoringParameters {
  clientHandle: ec.UInt32;
  samplingInterval: ec.Double;
  filter: ExtensionObject | null;
  queueSize: ec.UInt32;
  discardOldest: boolean;

 constructor( options?: IMonitoringParameters | null) {
  options = options || {};
  this.clientHandle = (options.clientHandle != null) ? options.clientHandle : 0;
  this.samplingInterval = (options.samplingInterval != null) ? options.samplingInterval : 0;
  this.filter = (options.filter != null) ? options.filter : null;
  this.queueSize = (options.queueSize != null) ? options.queueSize : 0;
  this.discardOldest = (options.discardOldest != null) ? options.discardOldest : false;

 }


 encode( out: DataStream) {
  ec.encodeUInt32(this.clientHandle, out);
  ec.encodeDouble(this.samplingInterval, out);
  encodeExtensionObject(this.filter, out);
  ec.encodeUInt32(this.queueSize, out);
  ec.encodeBoolean(this.discardOldest, out);

 }


 decode( inp: DataStream) {
  this.clientHandle = ec.decodeUInt32(inp);
  this.samplingInterval = ec.decodeDouble(inp);
  this.filter = decodeExtensionObject(inp);
  this.queueSize = ec.decodeUInt32(inp);
  this.discardOldest = ec.decodeBoolean(inp);

 }


 toJSON() {
  const out: any = {};
  out.ClientHandle = this.clientHandle;
  out.SamplingInterval = this.samplingInterval;
  out.Filter = jsonEncodeExtensionObject(this.filter);
  out.QueueSize = this.queueSize;
  out.DiscardOldest = this.discardOldest;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.clientHandle = inp.ClientHandle;
  this.samplingInterval = inp.SamplingInterval;
  this.filter = jsonDecodeExtensionObject(inp.Filter);
  this.queueSize = inp.QueueSize;
  this.discardOldest = inp.DiscardOldest;

 }


 clone( target?: MonitoringParameters): MonitoringParameters {
  if (!target) {
   target = new MonitoringParameters();
  }
  target.clientHandle = this.clientHandle;
  target.samplingInterval = this.samplingInterval;
  target.filter = this.filter;
  target.queueSize = this.queueSize;
  target.discardOldest = this.discardOldest;
  return target;
 }


}
export function decodeMonitoringParameters( inp: DataStream): MonitoringParameters {
  const obj = new MonitoringParameters();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('MonitoringParameters', MonitoringParameters, new ExpandedNodeId(2 /*numeric id*/, 742, 0));
