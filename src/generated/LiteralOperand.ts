/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import {Variant} from '../variant';
import {DataStream} from '../basic-types/DataStream';
import {FilterOperand} from './FilterOperand';

export type ILiteralOperand = Partial<LiteralOperand>;

/**

 * {@link https://reference.opcfoundation.org/nodesets/4/16130}
*/

export class LiteralOperand extends FilterOperand {
  value: Variant;

 constructor( options?: ILiteralOperand | null) {
  options = options || {};
  super();
  this.value = (options.value != null) ? options.value : new Variant();

 }


 encode( out: DataStream) {
  this.value.encode(out);

 }


 decode( inp: DataStream) {
  this.value.decode(inp);

 }


 toJSON() {
  const out: any = {};
  out.Value = this.value;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.value.fromJSON(inp.Value);

 }


 clone( target?: LiteralOperand): LiteralOperand {
  if (!target) {
   target = new LiteralOperand();
  }
  if (this.value) { target.value = this.value.clone(); }
  return target;
 }


}
export function decodeLiteralOperand( inp: DataStream): LiteralOperand {
  const obj = new LiteralOperand();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('LiteralOperand', LiteralOperand, new ExpandedNodeId(2 /*numeric id*/, 597, 0));
