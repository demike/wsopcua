/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import * as ec from '../basic-types';
import {BrokerTransportQualityOfService, encodeBrokerTransportQualityOfService, decodeBrokerTransportQualityOfService} from './BrokerTransportQualityOfService';
import {DataStream} from '../basic-types/DataStream';
import {DataSetReaderTransportDataType} from './DataSetReaderTransportDataType';

export type IBrokerDataSetReaderTransportDataType = Partial<BrokerDataSetReaderTransportDataType>;

/**

 * {@link https://reference.opcfoundation.org/nodesets/4/15841}
*/

export class BrokerDataSetReaderTransportDataType extends DataSetReaderTransportDataType {
  queueName: string | undefined;
  resourceUri: string | undefined;
  authenticationProfileUri: string | undefined;
  requestedDeliveryGuarantee: BrokerTransportQualityOfService;
  metaDataQueueName: string | undefined;

 constructor( options?: IBrokerDataSetReaderTransportDataType | undefined) {
  options = options || {};
  super();
  this.queueName = options.queueName;
  this.resourceUri = options.resourceUri;
  this.authenticationProfileUri = options.authenticationProfileUri;
  this.requestedDeliveryGuarantee = (options.requestedDeliveryGuarantee != null) ? options.requestedDeliveryGuarantee : BrokerTransportQualityOfService.Invalid;
  this.metaDataQueueName = options.metaDataQueueName;

 }


 encode( out: DataStream) {
  ec.encodeString(this.queueName, out);
  ec.encodeString(this.resourceUri, out);
  ec.encodeString(this.authenticationProfileUri, out);
  encodeBrokerTransportQualityOfService(this.requestedDeliveryGuarantee, out);
  ec.encodeString(this.metaDataQueueName, out);

 }


 decode( inp: DataStream) {
  this.queueName = ec.decodeString(inp);
  this.resourceUri = ec.decodeString(inp);
  this.authenticationProfileUri = ec.decodeString(inp);
  this.requestedDeliveryGuarantee = decodeBrokerTransportQualityOfService(inp);
  this.metaDataQueueName = ec.decodeString(inp);

 }


 toJSON() {
  const out: any = {};
  out.QueueName = this.queueName;
  out.ResourceUri = this.resourceUri;
  out.AuthenticationProfileUri = this.authenticationProfileUri;
  out.RequestedDeliveryGuarantee = this.requestedDeliveryGuarantee;
  out.MetaDataQueueName = this.metaDataQueueName;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.queueName = inp.QueueName;
  this.resourceUri = inp.ResourceUri;
  this.authenticationProfileUri = inp.AuthenticationProfileUri;
  this.requestedDeliveryGuarantee = inp.RequestedDeliveryGuarantee;
  this.metaDataQueueName = inp.MetaDataQueueName;

 }


 clone( target?: BrokerDataSetReaderTransportDataType): BrokerDataSetReaderTransportDataType {
  if (!target) {
   target = new BrokerDataSetReaderTransportDataType();
  }
  target.queueName = this.queueName;
  target.resourceUri = this.resourceUri;
  target.authenticationProfileUri = this.authenticationProfileUri;
  target.requestedDeliveryGuarantee = this.requestedDeliveryGuarantee;
  target.metaDataQueueName = this.metaDataQueueName;
  return target;
 }


}
export function decodeBrokerDataSetReaderTransportDataType( inp: DataStream): BrokerDataSetReaderTransportDataType {
  const obj = new BrokerDataSetReaderTransportDataType();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('BrokerDataSetReaderTransportDataType', BrokerDataSetReaderTransportDataType, new ExpandedNodeId(2 /*numeric id*/, 15733, 0));
