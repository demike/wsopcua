/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import * as ec from '../basic-types';
import {QualifiedName} from './QualifiedName';
import {DataStream} from '../basic-types/DataStream';

export interface IHistoryReadValueId {
  nodeId?: ec.NodeId;
  indexRange?: string;
  dataEncoding?: QualifiedName;
  continuationPoint?: Uint8Array;
}

/**

*/

export class HistoryReadValueId {
  nodeId: ec.NodeId;
  indexRange: string | null;
  dataEncoding: QualifiedName;
  continuationPoint: Uint8Array | null;

 constructor( options?: IHistoryReadValueId) {
  options = options || {};
  this.nodeId = (options.nodeId != null) ? options.nodeId : ec.NodeId.NullNodeId;
  this.indexRange = (options.indexRange != null) ? options.indexRange : null;
  this.dataEncoding = (options.dataEncoding != null) ? options.dataEncoding : new QualifiedName();
  this.continuationPoint = (options.continuationPoint != null) ? options.continuationPoint : null;

 }


 encode( out: DataStream) {
  ec.encodeNodeId(this.nodeId, out);
  ec.encodeString(this.indexRange, out);
  this.dataEncoding.encode(out);
  ec.encodeByteString(this.continuationPoint, out);

 }


 decode( inp: DataStream) {
  this.nodeId = ec.decodeNodeId(inp);
  this.indexRange = ec.decodeString(inp);
  this.dataEncoding.decode(inp);
  this.continuationPoint = ec.decodeByteString(inp);

 }


 clone( target?: HistoryReadValueId): HistoryReadValueId {
  if (!target) {
   target = new HistoryReadValueId();
  }
  target.nodeId = this.nodeId;
  target.indexRange = this.indexRange;
  if (this.dataEncoding) { target.dataEncoding = this.dataEncoding.clone(); }
  target.continuationPoint = this.continuationPoint;
  return target;
 }


}
export function decodeHistoryReadValueId( inp: DataStream): HistoryReadValueId {
  const obj = new HistoryReadValueId();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { makeExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('HistoryReadValueId', HistoryReadValueId, makeExpandedNodeId(637, 0));
