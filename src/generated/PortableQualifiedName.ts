/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import * as ec from '../basic-types';
import {DataStream} from '../basic-types/DataStream';

export interface IPortableQualifiedName {
  namespaceUri?: string;
  name?: string;
}

/**

 * {@link https://reference.opcfoundation.org/nodesets/2/16774}
*/

export class PortableQualifiedName {
  namespaceUri: string | null;
  name: string | null;

 constructor( options?: IPortableQualifiedName) {
  options = options || {};
  this.namespaceUri = (options.namespaceUri != null) ? options.namespaceUri : null;
  this.name = (options.name != null) ? options.name : null;

 }


 encode( out: DataStream) {
  ec.encodeString(this.namespaceUri, out);
  ec.encodeString(this.name, out);

 }


 decode( inp: DataStream) {
  this.namespaceUri = ec.decodeString(inp);
  this.name = ec.decodeString(inp);

 }


 toJSON() {
  const out: any = {};
  out.NamespaceUri = this.namespaceUri;
  out.Name = this.name;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.namespaceUri = inp.NamespaceUri;
  this.name = inp.Name;

 }


 clone( target?: PortableQualifiedName): PortableQualifiedName {
  if (!target) {
   target = new PortableQualifiedName();
  }
  target.namespaceUri = this.namespaceUri;
  target.name = this.name;
  return target;
 }


}
export function decodePortableQualifiedName( inp: DataStream): PortableQualifiedName {
  const obj = new PortableQualifiedName();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('PortableQualifiedName', PortableQualifiedName, new ExpandedNodeId(2 /*numeric id*/, 24105, 0));
