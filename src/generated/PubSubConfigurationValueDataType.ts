/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import {PubSubConfigurationRefDataType} from './PubSubConfigurationRefDataType';
import * as ec from '../basic-types';
import {Variant} from '../variant';
import {DataStream} from '../basic-types/DataStream';

export type IPubSubConfigurationValueDataType = Partial<PubSubConfigurationValueDataType>;

/**

 * {@link https://reference.opcfoundation.org/nodesets/2/16875}
*/

export class PubSubConfigurationValueDataType {
  configurationElement: PubSubConfigurationRefDataType;
  name: string | undefined;
  identifier: Variant;

 constructor( options?: IPubSubConfigurationValueDataType | undefined) {
  options = options || {};
  this.configurationElement = (options.configurationElement != null) ? options.configurationElement : new PubSubConfigurationRefDataType();
  this.name = options.name;
  this.identifier = (options.identifier != null) ? options.identifier : new Variant();

 }


 encode( out: DataStream) {
  this.configurationElement.encode(out);
  ec.encodeString(this.name, out);
  this.identifier.encode(out);

 }


 decode( inp: DataStream) {
  this.configurationElement.decode(inp);
  this.name = ec.decodeString(inp);
  this.identifier.decode(inp);

 }


 toJSON() {
  const out: any = {};
  out.ConfigurationElement = this.configurationElement;
  out.Name = this.name;
  out.Identifier = this.identifier;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.configurationElement.fromJSON(inp.ConfigurationElement);
  this.name = inp.Name;
  this.identifier.fromJSON(inp.Identifier);

 }


 clone( target?: PubSubConfigurationValueDataType): PubSubConfigurationValueDataType {
  if (!target) {
   target = new PubSubConfigurationValueDataType();
  }
  if (this.configurationElement) { target.configurationElement = this.configurationElement.clone(); }
  target.name = this.name;
  if (this.identifier) { target.identifier = this.identifier.clone(); }
  return target;
 }


}
export function decodePubSubConfigurationValueDataType( inp: DataStream): PubSubConfigurationValueDataType {
  const obj = new PubSubConfigurationValueDataType();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('PubSubConfigurationValueDataType', PubSubConfigurationValueDataType, new ExpandedNodeId(2 /*numeric id*/, 25532, 0));
