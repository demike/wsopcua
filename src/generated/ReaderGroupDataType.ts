/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import {ExtensionObject, encodeExtensionObject, decodeExtensionObject, jsonEncodeExtensionObject, jsonDecodeExtensionObject} from '../basic-types/extension_object';
import {DataSetReaderDataType} from './DataSetReaderDataType';
import {decodeDataSetReaderDataType} from './DataSetReaderDataType';
import * as ec from '../basic-types';
import {DataStream} from '../basic-types/DataStream';
import {PubSubGroupDataType} from './PubSubGroupDataType';
import {IPubSubGroupDataType} from './PubSubGroupDataType';

export type IReaderGroupDataType = Partial<ReaderGroupDataType>;

/**

*/

export class ReaderGroupDataType extends PubSubGroupDataType {
  transportSettings: ExtensionObject | null;
  messageSettings: ExtensionObject | null;
  dataSetReaders: (DataSetReaderDataType)[];

 constructor( options?: IReaderGroupDataType | null) {
  options = options || {};
  super(options);
  this.transportSettings = (options.transportSettings != null) ? options.transportSettings : null;
  this.messageSettings = (options.messageSettings != null) ? options.messageSettings : null;
  this.dataSetReaders = (options.dataSetReaders != null) ? options.dataSetReaders : [];

 }


 encode( out: DataStream) {
  super.encode(out);
  encodeExtensionObject(this.transportSettings, out);
  encodeExtensionObject(this.messageSettings, out);
  ec.encodeArray(this.dataSetReaders, out);

 }


 decode( inp: DataStream) {
  super.decode(inp);
  this.transportSettings = decodeExtensionObject(inp);
  this.messageSettings = decodeExtensionObject(inp);
  this.dataSetReaders = ec.decodeArray(inp, decodeDataSetReaderDataType) ?? [];

 }


 toJSON() {
  const out: any = super.toJSON();
  out.TransportSettings = jsonEncodeExtensionObject(this.transportSettings);
  out.MessageSettings = jsonEncodeExtensionObject(this.messageSettings);
  out.DataSetReaders = this.dataSetReaders;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  super.fromJSON(inp);
  this.transportSettings = jsonDecodeExtensionObject(inp.TransportSettings);
  this.messageSettings = jsonDecodeExtensionObject(inp.MessageSettings);
  this.dataSetReaders = ec.jsonDecodeStructArray( inp.DataSetReaders,DataSetReaderDataType);

 }


 clone( target?: ReaderGroupDataType): ReaderGroupDataType {
  if (!target) {
   target = new ReaderGroupDataType();
  }
  super.clone(target);
  target.transportSettings = this.transportSettings;
  target.messageSettings = this.messageSettings;
  if (this.dataSetReaders) { target.dataSetReaders = ec.cloneComplexArray(this.dataSetReaders); }
  return target;
 }


}
export function decodeReaderGroupDataType( inp: DataStream): ReaderGroupDataType {
  const obj = new ReaderGroupDataType();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('ReaderGroupDataType', ReaderGroupDataType, new ExpandedNodeId(2 /*numeric id*/, 21153, 0));
