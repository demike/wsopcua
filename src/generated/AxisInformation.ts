/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import {EUInformation} from './EUInformation';
import {Range} from './Range';
import {LocalizedText} from './LocalizedText';
import {AxisScaleEnumeration, encodeAxisScaleEnumeration, decodeAxisScaleEnumeration} from './AxisScaleEnumeration';
import * as ec from '../basic-types';
import {DataStream} from '../basic-types/DataStream';

export interface IAxisInformation {
  engineeringUnits?: EUInformation;
  eURange?: Range;
  title?: LocalizedText;
  axisScaleType?: AxisScaleEnumeration;
  axisSteps?: ec.Double[];
}

/**

 * {@link https://reference.opcfoundation.org/nodesets/4/16249}
*/

export class AxisInformation {
  engineeringUnits: EUInformation;
  eURange: Range;
  title: LocalizedText;
  axisScaleType: AxisScaleEnumeration;
  axisSteps: ec.Double[];

 constructor( options?: IAxisInformation) {
  options = options || {};
  this.engineeringUnits = (options.engineeringUnits != null) ? options.engineeringUnits : new EUInformation();
  this.eURange = (options.eURange != null) ? options.eURange : new Range();
  this.title = (options.title != null) ? options.title : new LocalizedText();
  this.axisScaleType = (options.axisScaleType != null) ? options.axisScaleType : null;
  this.axisSteps = (options.axisSteps != null) ? options.axisSteps : [];

 }


 encode( out: DataStream) {
  this.engineeringUnits.encode(out);
  this.eURange.encode(out);
  this.title.encode(out);
  encodeAxisScaleEnumeration(this.axisScaleType, out);
  ec.encodeArray(this.axisSteps, out, ec.encodeDouble);

 }


 decode( inp: DataStream) {
  this.engineeringUnits.decode(inp);
  this.eURange.decode(inp);
  this.title.decode(inp);
  this.axisScaleType = decodeAxisScaleEnumeration(inp);
  this.axisSteps = ec.decodeArray(inp, ec.decodeDouble);

 }


 toJSON() {
  const out: any = {};
  out.EngineeringUnits = this.engineeringUnits;
  out.EURange = this.eURange;
  out.Title = this.title;
  out.AxisScaleType = this.axisScaleType;
  out.AxisSteps = this.axisSteps;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.engineeringUnits.fromJSON(inp.EngineeringUnits);
  this.eURange.fromJSON(inp.EURange);
  this.title.fromJSON(inp.Title);
  this.axisScaleType = inp.AxisScaleType;
  this.axisSteps = inp.AxisSteps;

 }


 clone( target?: AxisInformation): AxisInformation {
  if (!target) {
   target = new AxisInformation();
  }
  if (this.engineeringUnits) { target.engineeringUnits = this.engineeringUnits.clone(); }
  if (this.eURange) { target.eURange = this.eURange.clone(); }
  if (this.title) { target.title = this.title.clone(); }
  target.axisScaleType = this.axisScaleType;
  target.axisSteps = ec.cloneArray(this.axisSteps);
  return target;
 }


}
export function decodeAxisInformation( inp: DataStream): AxisInformation {
  const obj = new AxisInformation();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('AxisInformation', AxisInformation, new ExpandedNodeId(2 /*numeric id*/, 12079, 0));
