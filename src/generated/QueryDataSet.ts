/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import * as ec from '../basic-types';
import {Variant} from '../variant';
import {decodeVariant} from '../variant';
import {DataStream} from '../basic-types/DataStream';

export interface IQueryDataSet {
  nodeId?: ec.ExpandedNodeId;
  typeDefinitionNode?: ec.ExpandedNodeId;
  values?: Variant[];
}

/**

*/

export class QueryDataSet {
  nodeId: ec.ExpandedNodeId;
  typeDefinitionNode: ec.ExpandedNodeId;
  values: Variant[];

 constructor( options?: IQueryDataSet) {
  options = options || {};
  this.nodeId = (options.nodeId != null) ? options.nodeId : ec.ExpandedNodeId.NullExpandedNodeId;
  this.typeDefinitionNode = (options.typeDefinitionNode != null) ? options.typeDefinitionNode : ec.ExpandedNodeId.NullExpandedNodeId;
  this.values = (options.values != null) ? options.values : [];

 }


 encode( out: DataStream) {
  ec.encodeExpandedNodeId(this.nodeId, out);
  ec.encodeExpandedNodeId(this.typeDefinitionNode, out);
  ec.encodeArray(this.values, out);

 }


 decode( inp: DataStream) {
  this.nodeId = ec.decodeExpandedNodeId(inp);
  this.typeDefinitionNode = ec.decodeExpandedNodeId(inp);
  this.values = ec.decodeArray(inp, decodeVariant);

 }


 clone( target?: QueryDataSet): QueryDataSet {
  if (!target) {
   target = new QueryDataSet();
  }
  target.nodeId = this.nodeId;
  target.typeDefinitionNode = this.typeDefinitionNode;
  if (this.values) { target.values = ec.cloneComplexArray(this.values); }
  return target;
 }


}
export function decodeQueryDataSet( inp: DataStream): QueryDataSet {
  const obj = new QueryDataSet();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('QueryDataSet', QueryDataSet, new ExpandedNodeId(2 /*numeric id*/, 579, 0));
