/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import * as ec from '../basic-types';
import {ServerState, encodeServerState, decodeServerState} from '.';
import {DataStream} from '../basic-types';

export interface IRedundantServerDataType {
  serverId?: string;
  serviceLevel?: ec.Byte;
  serverState?: ServerState;
}

/**

*/

export class RedundantServerDataType {
  serverId: string | null;
  serviceLevel: ec.Byte;
  serverState: ServerState;

 constructor( options?: IRedundantServerDataType) {
  options = options || {};
  this.serverId = (options.serverId != null) ? options.serverId : null;
  this.serviceLevel = (options.serviceLevel != null) ? options.serviceLevel : 0;
  this.serverState = (options.serverState != null) ? options.serverState : null;

 }


 encode( out: DataStream) {
  ec.encodeString(this.serverId, out);
  ec.encodeByte(this.serviceLevel, out);
  encodeServerState(this.serverState, out);

 }


 decode( inp: DataStream) {
  this.serverId = ec.decodeString(inp);
  this.serviceLevel = ec.decodeByte(inp);
  this.serverState = decodeServerState(inp);

 }


 toJSON() {
  const out: any = {};
  out.ServerId = this.serverId;
  out.ServiceLevel = this.serviceLevel;
  out.ServerState = this.serverState;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.serverId = inp.ServerId;
  this.serviceLevel = inp.ServiceLevel;
  this.serverState = inp.ServerState;

 }


 clone( target?: RedundantServerDataType): RedundantServerDataType {
  if (!target) {
   target = new RedundantServerDataType();
  }
  target.serverId = this.serverId;
  target.serviceLevel = this.serviceLevel;
  target.serverState = this.serverState;
  return target;
 }


}
export function decodeRedundantServerDataType( inp: DataStream): RedundantServerDataType {
  const obj = new RedundantServerDataType();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory';
import { ExpandedNodeId } from '../nodeid';
register_class_definition('RedundantServerDataType', RedundantServerDataType, new ExpandedNodeId(2 /*numeric id*/, 855, 0));
