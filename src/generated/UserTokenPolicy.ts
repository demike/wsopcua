/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import * as ec from '../basic-types';
import {UserTokenType, encodeUserTokenType, decodeUserTokenType} from './UserTokenType';
import {DataStream} from '../basic-types/DataStream';

export type IUserTokenPolicy = Partial<UserTokenPolicy>;

/**

 * {@link https://reference.opcfoundation.org/nodesets/4/16035}
*/

export class UserTokenPolicy {
  policyId: string | null;
  tokenType: UserTokenType;
  issuedTokenType: string | null;
  issuerEndpointUrl: string | null;
  securityPolicyUri: string | null;

 constructor( options?: IUserTokenPolicy) {
  options = options || {};
  this.policyId = (options.policyId != null) ? options.policyId : null;
  this.tokenType = (options.tokenType != null) ? options.tokenType : null;
  this.issuedTokenType = (options.issuedTokenType != null) ? options.issuedTokenType : null;
  this.issuerEndpointUrl = (options.issuerEndpointUrl != null) ? options.issuerEndpointUrl : null;
  this.securityPolicyUri = (options.securityPolicyUri != null) ? options.securityPolicyUri : null;

 }


 encode( out: DataStream) {
  ec.encodeString(this.policyId, out);
  encodeUserTokenType(this.tokenType, out);
  ec.encodeString(this.issuedTokenType, out);
  ec.encodeString(this.issuerEndpointUrl, out);
  ec.encodeString(this.securityPolicyUri, out);

 }


 decode( inp: DataStream) {
  this.policyId = ec.decodeString(inp);
  this.tokenType = decodeUserTokenType(inp);
  this.issuedTokenType = ec.decodeString(inp);
  this.issuerEndpointUrl = ec.decodeString(inp);
  this.securityPolicyUri = ec.decodeString(inp);

 }


 toJSON() {
  const out: any = {};
  out.PolicyId = this.policyId;
  out.TokenType = this.tokenType;
  out.IssuedTokenType = this.issuedTokenType;
  out.IssuerEndpointUrl = this.issuerEndpointUrl;
  out.SecurityPolicyUri = this.securityPolicyUri;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  this.policyId = inp.PolicyId;
  this.tokenType = inp.TokenType;
  this.issuedTokenType = inp.IssuedTokenType;
  this.issuerEndpointUrl = inp.IssuerEndpointUrl;
  this.securityPolicyUri = inp.SecurityPolicyUri;

 }


 clone( target?: UserTokenPolicy): UserTokenPolicy {
  if (!target) {
   target = new UserTokenPolicy();
  }
  target.policyId = this.policyId;
  target.tokenType = this.tokenType;
  target.issuedTokenType = this.issuedTokenType;
  target.issuerEndpointUrl = this.issuerEndpointUrl;
  target.securityPolicyUri = this.securityPolicyUri;
  return target;
 }


}
export function decodeUserTokenPolicy( inp: DataStream): UserTokenPolicy {
  const obj = new UserTokenPolicy();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory/factories_factories';
import { ExpandedNodeId } from '../nodeid/expanded_nodeid';
register_class_definition('UserTokenPolicy', UserTokenPolicy, new ExpandedNodeId(2 /*numeric id*/, 306, 0));
