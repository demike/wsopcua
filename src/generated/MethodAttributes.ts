/**
 generated by wsopcua data type generator
 do not modify, changes will be overwritten
*/

import * as ec from '../basic-types';
import {DataStream} from '../basic-types';
import {NodeAttributes} from '.';
import {INodeAttributes} from '.';

export interface IMethodAttributes extends INodeAttributes {
  executable?: boolean;
  userExecutable?: boolean;
}

/**

*/

export class MethodAttributes extends NodeAttributes {
  executable: boolean;
  userExecutable: boolean;

 constructor( options?: IMethodAttributes) {
  options = options || {};
  super(options);
  this.executable = (options.executable != null) ? options.executable : false;
  this.userExecutable = (options.userExecutable != null) ? options.userExecutable : false;

 }


 encode( out: DataStream) {
  super.encode(out);
  ec.encodeBoolean(this.executable, out);
  ec.encodeBoolean(this.userExecutable, out);

 }


 decode( inp: DataStream) {
  super.decode(inp);
  this.executable = ec.decodeBoolean(inp);
  this.userExecutable = ec.decodeBoolean(inp);

 }


 toJSON() {
  const out: any = super.toJSON();
  out.Executable = this.executable;
  out.UserExecutable = this.userExecutable;
 return out;
 }


 fromJSON( inp: any) {
if (!inp) { return; }
  super.fromJSON(inp);
  this.executable = inp.Executable;
  this.userExecutable = inp.UserExecutable;

 }


 clone( target?: MethodAttributes): MethodAttributes {
  if (!target) {
   target = new MethodAttributes();
  }
  super.clone(target);
  target.executable = this.executable;
  target.userExecutable = this.userExecutable;
  return target;
 }


}
export function decodeMethodAttributes( inp: DataStream): MethodAttributes {
  const obj = new MethodAttributes();
   obj.decode(inp);
   return obj;

 }



import {register_class_definition} from '../factory';
import { ExpandedNodeId } from '../nodeid';
register_class_definition('MethodAttributes', MethodAttributes, new ExpandedNodeId(2 /*numeric id*/, 360, 0));
